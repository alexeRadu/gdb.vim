*gdb.txt* A plugin that enables debugging from your favourite editor

==============================================================================

CONTENTS                                                *gdb-contents*

    1. Introduction .................... |gdb-intro|
    2. Features ........................ |gdb-features|
    3. Getting Started ................. |gdb-start|
    4. Customizing ..................... |gdb-customizing|
    5. Highlighting .................... |gdb-highlighting|
    6. Commands ........................ |gdb-commands|
    7. Mappings ........................ |gdb-mappings|
    8. Session manipulation ............ |gdb-session|
    9. General guidelines .............. |gdb-guidelines|
   10. License ......................... |gdb-license|
   11. Issues and Bugs ................. |gdb-bugs|
   12. Contributing .................... |gdb-contributing|


Original Author:    Daniel Malea <daniel.malea@intel.com>
Forked by:          Tobias Pflug <tobias.pflug@gmail.com>
Maintainer:         John C F <john.ch.fr@gmail.com>
License:            Apache 2.0 (with some parts under the Vim |license|)

==============================================================================

INTRODUCTION                                            *gdb-intro*

The plugin provides an interface to the gdb debugger allowing for convenient
debugging sessions inside your favorite editor.

The plugin takes advantage of Neovim's job API to spawn a separate process and
communicates with the Neovim process using RPC calls.

==============================================================================

FEATURES                                                *gdb-features*

* Buffers showing debugger state: backtrace, breakpoints etc.
* Event-based, non-blocking UI
* Breakpoints persistence across exits
* Modal approach: define modes and replay commands during mode-switches

==============================================================================

GETTING STARTED                                         *gdb-start*

To quickly get started, compile (with debugging symbols) the source and
open a source file belonging to the program in Neovim, and execute
>
    :GGsession new
<
This will prompt you to choose a location for your new "session" file, and
further prompts you to input path of the target executable.

The default session file defines 2 modes: "code", and "debug". You are now
in the "code" mode, which is an empty mode. Now switch to "debug" mode:
>
    :GGmode debug
<
Now, a new tab with windows showing various information about the state of
debugger will be created. And you will prompted whether you would like to
launch the process right away.

With cursor on some line in the source file, press |<Plug>GGBreakSwitch| to
set a breakpoint at that line. Alternatively, you can execute:
>
    :GG breakpoint set --name function_name
<
Notice that there is tab-completion. If you chose not to launch the process
earlier, you can do so by one of the following commands:
>
    :GG process launch
    :GG process launch -- args
    :GG process launch -i infile -o outfile -- args
<
Once the program reaches the specified breakpoint you will be able to
inspect state and step through the program ... bla bla bla.

Don't forget that, you can interrupt an unresponsive process using:
>
    :GG process interrupt
<
Alternatively, you can kill it using:
>
    :GG process kill
<
==============================================================================

CUSTOMIZING                                             *gdb-customizing*

                                                *g:gdb#session#file*
g:gdb#session#file ~
        Default session file name: `gdb-nvim.json`

                                                *g:gdb#session#mode_teardown*
g:gdb#session#mode_teardown ~
        Default layout teardown function: `gdb#layout#teardown`
        This is called every time mode is switched, with the name of the old
        mode as the first argument.

                                                *g:gdb#session#mode_setup*
g:gdb#session#mode_setup ~
        Default layout setup function: `gdb#layout#setup`
        This is called every time mode is switched, right after
        |g:gdb#session#mode_teardown| is called, with the name of the new
        mode as the first argument.

                                                *g:gdb#sign#bp_symbol*
g:gdb#sign#bp_symbol ~
        Default sign text for breakpoints: `B>`

                                                *g:gdb#sign#pc_symbol*
g:gdb#sign#pc_symbol ~
        Default sign text for program counter: `->`

==============================================================================

HIGHLIGHTING                                            *gdb-highlighting*

To customize the highlighting of signs, use the following highlight groups:

                                                *hl-GGBreakpointSign*
GGBreakpointSign        For breakpoint signs, links to |Type| by default.

                                                *hl-GGSelectedPCSign*
GGSelectedPCSign        For the selected program counter sign, links to |Debug|
                        by default.

                                                *hl-GGUnselectedPCSign*
GGUnselectedPCSign      For the unselected program counter sign, links to
                        |NonText| by default.

Example: >
    highlight GGBreakpointSign ctermfg=cyan guifg=cyan

To customize highlighting for the line where a sign resides, you can use the
following highlight groups:

                                                *hl-GGBreakpointLine*
GGBreakpointLine        For breakpoint lines, unhighlighted by default.

                                                *hl-GGSelectedPCLine*
GGSelectedPCLine        For the current line of the selected program counter,
                        links to |DiffText| by default.

                                                *hl-GGUnselectedPCLine*
GGUnselectedPCLine      For the current line of the unselected program counter,
                        links to |DiffChange| by default.

Example: >
    highlight GGSelectedPCLine ctermbg=DarkGrey guibg=DarkGrey

==============================================================================

COMMANDS                                                *gdb-commands*

                                                *:GGsession*
:GGsession {cmd} ...    Session manipulation command.
                        See |gdb-session| for more details.

                                                *:GG*
:GG {cmd}               Execute an arbitrary GDB command {cmd} in the GDB
                        command interpreter. This is only defined after a
                        session is created or loaded.

                                                *:GGmode*
:GGmode {mode}          Switch to {mode}. This first executes teardown
                        commands defined in the session file for the current
                        mode, then calls |g:gdb#session#mode_teardown|,
                        followed by |g:gdb#session#mode_setup|, and finally
                        executing the setup commands for the new mode.

                                                *:GGrefresh*
:GGrefresh              Updates all debugger signs and buffer contents.

                                                *:GGstdin*
:GGstdin [{arg}]        If no {arg} is specified, or if {arg} is `--raw`, an
                        |input()| prompt will show up. If `--raw` was not
                        specified, the input line will be suffixed with a
                        line-break "\n" and passed to the process' stdin.
                        {arg} can also be one of
                            `BS` (backspace)
                            `CR` (carriage return)
                            `EOT` (end of transmission)
                            `LF` (line-feed)
                            `NUL` (null character)
                            `SPACE`
                        which passes the corresponding character to stdin.
                        Also see |digraph-table|.

==============================================================================

MAPPINGS                                                *gdb-mappings*

                                                *<Plug>GGBreakSwitch*
<Plug>GGBreakSwitch     Insert breakpoint at cursor location.

                                                *v_<Plug>GGStdInSelected*
<Plug>GGStdInSelected   Put the selected text into the stdin of the process.

I recommend setting the following maps:
>
    nmap <M-b> <Plug>GGBreakSwitch
    vmap <F2> <Plug>GGStdInSelected
    nnoremap <F4> :GGstdin<CR>
    nnoremap <F5> :GGmode debug<CR>
    nnoremap <S-F5> :GGmode code<CR>
    nnoremap <F8> :GG continue<CR>
    nnoremap <S-F8> :GG process interrupt<CR>
    nnoremap <F9> :GG print <C-R>=expand('<cword>')<CR>
    vnoremap <F9> :<C-U>GG print <C-R>=gdb#util#get_selection()<CR><CR>
<
==============================================================================

SESSION MANIPULATION                                    *gdb-session*

Right after a session is created or loaded, the first mode defined in the
session file is setup.

                                                *:GGsession-subcommands*
Subcommand      Description ~
new             Create a new debug session based on a default template.
load [path]     If `path` exists, create a debug session using it. If no `path`
                argument was given, recursively look for a file with name
                |g:gdb#session#file| in parent directories and use it
                instead, if found.
show            Show the session file with latest changes.
reload          Reload the session file in use: discards the current debug
                state, and parses the session file again.
bp-save         Save all the currently set breakpoints to the session state.
bp-set          Set breakpoints defined in the session state.

                                                *gdb-session-file*
See the json file(s) in `test` directory, or try out: >
    :GGsession new
    :GGsession show

==============================================================================

GENERAL GUIDELINES                                      *gdb-guidelines*

Below are some random points that might make your debugging life easier:

* The debugger instance/process stays in the parent directory of the loaded
  session file, which should preferably be the project root. Consequently,
  GDB completions will also be relative to it.

* Working with multiple targets is currently not supported.

* Try out (in debug mode): >
    :GG help process
    :GG command history

* While in logs buffer, try pressing `i`, `d` or `q`

* Having a key-binding for `process interrupt` command will come in handy.

* For compiling from vim, try out the neomake plugin by benekastah: >
    :NeomakeSh gcc -g -o targ %

* If you run into problems, do check out the FAQ section in `README.md`

==============================================================================

LICENSE                                                 *gdb-license*

Primarily licensed under Apache 2.0 with some parts under the Vim |license|.
See `LICENSE` file included in the source directory for more details.

==============================================================================

FEEDBACK AND ISSUES                                     *gdb-bugs*

If you run into a bug, use the Github issue tracker to report it:

https://github.com/dbgx/gdb.nvim/issues

It would be nice if you could set the following environment variable:
>
    export NVIM_PYTHON_LOG_FILE=/tmp/nvlog
<
and post the log along with the bug report.

==============================================================================

CONTRIBUTING                                            *gdb-contributing*

Awesome! Check out the Github issues page for ideas. There are a lot of FIXMEs
and TODOs springled across the codebase. If you have a feature idea, please
report it as an issue, before starting to work on it.

Another great way to contribute would be to make this documentation more
comprehensive, and easy to understand. Also, you could post a screencast, or
an asciinema recording, or an interesting session file example in the gitter
page; which could be included in the repo.

 vim:tw=78:sw=4:ft=help:norl:
